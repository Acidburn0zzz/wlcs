sudo: required
dist: xenial

language: cpp

branches:
  only:
  - staging
  - trying
  - master
  # release branch
  - /^release\/[\d\.]+$/
  # release tag
  - /^v[\d\.]+$/

addons:
  snaps:
  -  lxd

stages:
- name: test
- name: upload to ppa:mir-team
  if: type = push
      AND repo = MirServer/wlcs
      AND ( branch = master
            OR branch =~ ^release/[\d\.]+$
            OR tag =~ ^v[\d\.]+$ )

install:
  - sudo adduser $USER lxd
  - sudo apt remove --yes lxd
  - sudo sh -c 'echo PATH=/snap/bin:$PATH >> /etc/environment'
  - sudo snap run lxd waitready
  - sudo snap run lxd init --auto

env:
  global:
  - DEBFULLNAME="Mir CI Bot"
  - DEBEMAIL="mir-ci-bot@canonical.com"
  matrix:
  - SOURCE=ubuntu        IMAGE=16.04        VARIANT=gcc
  - SOURCE=ubuntu        IMAGE=18.04        VARIANT=gcc
  - SOURCE=ubuntu        IMAGE=19.04        VARIANT=gcc
  - SOURCE=ubuntu-daily  IMAGE=devel/amd64  VARIANT=gcc
  - SOURCE=ubuntu-daily  IMAGE=devel/amd64  VARIANT=clang
  - SOURCE=images        IMAGE=fedora/29    VARIANT=gcc
  - SOURCE=images        IMAGE=fedora/30    VARIANT=gcc

script:
  - sg lxd -c "snap run lxd.lxc launch $SOURCE:$IMAGE build-container"
  - sg lxd -c "snap run lxd.lxc config device add build-container source disk source=$CWD path=/source"
  - case $SOURCE in
        ubuntu*)
            echo "ubuntu" > build-target
            ;;
        images)
            case $IMAGE in
                fedora*)
                    echo "fedora" > build-target
                    ;;
                *)
                    echo "Unhandled image type $IMAGE"
                    false
                    ;;
            esac
            ;;
        *)
            echo "Unhandled remote $SOURCE"
            false
            ;;
    esac
  - sg lxd -c "snap run lxd.lxc exec build-container -- /source/tools/$(cat build-target)/setup $VARIANT"
  - sg lxd -c "snap run lxd.lxc exec build-container -- /source/tools/$(cat build-target)/build $VARIANT"
  - sg lxd -c "snap run lxd.lxc exec build-container -- /source/tools/$(cat build-target)/post-build $VARIANT"

jobs:
  include:
  - &ppa-upload
    stage: upload to ppa:mir-team
    env: RELEASE=16.04
    git:
      depth: false
    before_install: &decrypt-bot-data
    - openssl aes-256-cbc -K $encrypted_de81f8095dc8_key -iv $encrypted_de81f8095dc8_iv -in tools/bot-data.tar.xz.enc -out /tmp/bot-data.tar.xz -d
    - tar --verbose --extract --xz --file /tmp/bot-data.tar.xz --directory ${HOME}
    # We don't need to do the install steps
    install: skip
    script:
    - tools/ppa-upload.sh
    addons:
      apt:
        packages:
        - debhelper
        - devscripts
        - dput
        - fakeroot
        - python-bzrlib
        - python-launchpadlib
        - python-paramiko
        - libdistro-info-perl
  - <<: *ppa-upload
    env: RELEASE=18.04
  - <<: *ppa-upload
    env: RELEASE=19.04
  - <<: *ppa-upload
    env: RELEASE=devel

